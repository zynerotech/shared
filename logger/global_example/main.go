package main

import (
	"errors"
	"os"
	"time"

	"gitlab.com/zynero/shared/logger"
)

func main() {
	// üåü –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	globalCfg := logger.GlobalConfig{
		// –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
		Logger: logger.Config{
			Level:      "debug",
			Format:     "console", // –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–º–µ—Ä–µ
			Output:     "stdout",
			TimeFormat: time.RFC3339,
			CallerInfo: true,
		},

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º)
		Application: logger.ApplicationInfo{
			Name:        "user-service",
			Version:     "1.2.3",
			Environment: "production",
			Instance:    getHostname(),
		},

		// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
		GlobalFields: map[string]any{
			"service_type": "microservice",
			"region":       "us-east-1",
			"cluster":      "main",
		},

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
		Components: map[string]logger.ComponentConfig{
			"database": {
				Level: "warn", // –¥–ª—è –ë–î —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
				Fields: map[string]any{
					"db_type":    "postgres",
					"connection": "primary",
				},
			},
			"auth": {
				Level: "info",
				Fields: map[string]any{
					"auth_provider": "oauth2",
				},
			},
			"api": {
				Level: "debug", // –¥–ª—è API –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
				Fields: map[string]any{
					"api_version": "v1",
				},
			},
		},
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := logger.InitGlobal(globalCfg); err != nil {
		panic(err)
	}

	logger.Info().Msg("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")

	// 1. –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
	logger.Info().Msg("Application started")
	logger.Error().Msg("This includes all global fields automatically")

	// 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Å –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
	databaseLogger := logger.Component("database")
	databaseLogger.Info().Msg("This will be logged as WARN level due to component config")
	databaseLogger.Warn().Msg("Database connection established") // –≠—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ
	databaseLogger.Debug().Msg("This debug won't show - component level is WARN")

	authLogger := logger.Component("auth")
	authLogger.Info().Msg("User authentication attempt")
	authLogger.Error().Str("user_id", "12345").Msg("Authentication failed")

	apiLogger := logger.Component("api")
	apiLogger.Debug().Msg("This debug message will show - component level is DEBUG")
	apiLogger.Info().Str("endpoint", "/users").Int("status", 200).Msg("API request handled")

	// 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö/–ø–∞–∫–µ—Ç–∞—Ö
	simulateUserService()
	simulatePaymentService()
	simulateNotificationService()

	// 4. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
	logger.Info().Msg("=== Updating global fields dynamically ===")
	logger.UpdateGlobalFields(map[string]any{
		"feature_flag": "new_feature_enabled",
		"experiment":   "A/B-test-123",
	})

	logger.Info().Msg("Message with updated global fields")

	// 5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	logger.Info().Msg("=== Dynamic component level management ===")
	logger.SetComponentLevel("database", "debug") // –í–∫–ª—é—á–∞–µ–º debug –¥–ª—è –ë–î

	// –ù–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –ë–î —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å debug —É—Ä–æ–≤–Ω–µ–º
	newDBLogger := logger.Component("database")
	newDBLogger.Debug().Msg("Now this debug message will show!")

	// 6. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
	components := logger.ListComponents()
	logger.Info().Interface("registered_components", components).Msg("All registered components")

	for _, comp := range components {
		level := logger.GetComponentLevel(comp)
		logger.Info().Str("component", comp).Str("level", level).Msg("Component level")
	}

	// 7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	currentConfig := logger.GetGlobalConfig()
	if currentConfig != nil {
		logger.Info().
			Str("app_name", currentConfig.Application.Name).
			Str("app_version", currentConfig.Application.Version).
			Int("global_fields_count", len(currentConfig.GlobalFields)).
			Int("components_count", len(currentConfig.Components)).
			Msg("Current global configuration")
	}

	logger.Info().Msg("=== Example completed successfully ===")
}

// –ò–º–∏—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
func simulateUserService() {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª –±—ã –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç
	userLogger := logger.Component("user-service")
	userLogger.Info().Str("operation", "create_user").Msg("Creating new user")
	userLogger.Warn().Str("user_id", "user123").Msg("User validation warning")
}

func simulatePaymentService() {
	paymentLogger := logger.Component("payment")
	paymentLogger.Info().
		Str("payment_id", "pay_123").
		Float64("amount", 99.99).
		Str("currency", "USD").
		Msg("Processing payment")

	// –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏
	err := errors.New("insufficient funds")
	paymentLogger.Error().
		Err(err).
		Str("payment_id", "pay_123").
		Msg("Payment processing failed")
}

func simulateNotificationService() {
	notificationLogger := logger.Component("notification")
	notificationLogger.Info().
		Str("type", "email").
		Str("recipient", "user@example.com").
		Msg("Sending notification")

	notificationLogger.Debug().
		Str("template", "welcome_email").
		Msg("Using email template")
}

func getHostname() string {
	hostname, err := os.Hostname()
	if err != nil {
		return "unknown"
	}
	return hostname
}
